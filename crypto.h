#ifndef CRYPTO_H
#define CRYPTO_H

#include <Windows.h>
#include <vector>
#include <bcrypt.h>

#pragma comment(lib, "bcrypt.lib")

// Algorithm types
const int XOR = 0;
const int AES = 1;

class Payload {
private:
	// Payload Parameters
	std::vector<UCHAR> bKey;	// Encryption Key
	std::vector<UCHAR> iv;		// Initialization Vector
	int algorithm;				// Encryption algorithm to use

public:
	std::vector<UCHAR> payload; // Payload is readable

	Payload(UCHAR* data, SIZE_T dataSize, UCHAR* key, SIZE_T keySize, std::vector<UCHAR> initVector, int alg)
		: payload(data, data + dataSize), bKey(key, key + keySize), iv(initVector), algorithm(alg) {}

	// Decrypts payload using algorithm provided into payload object
	// Returns TRUE upon success, FALSE otherwise
	//
	BOOL Decrypt();
	
	// Encrypts payload using algorithm provided into payload object
	// Returns TRUE upon success, FALSE otherwise
	//
	BOOL Encrypt();
};

std::vector<UCHAR> GenerateRandomIV();

#endif