#ifndef CRYPTO_H
#define CRYPTO_H

#include <Windows.h>
#include <cstring>

// Algorithm types
const int XOR = 0;
const int AES = 1;

class Payload {
private:
	// Payload Parameters
	UCHAR* payload;	  // Payload Bytes
	SIZE_T szPayload; // Size of payload
	int algorithm;	  // Encryption algorithm to use
	UCHAR* bKey;	  // Encryption Key
	SIZE_T szKey;     // Size of encryption key
	UCHAR* iv;        // Initialization Vector
public:
	Payload(UCHAR* data, SIZE_T dataSize, int alg, UCHAR* key, SIZE_T keySize, UCHAR* initVector)
		: payload(nullptr), szPayload(0), algorithm(alg), bKey(nullptr), szKey(0), iv(nullptr) {
		
		payload = new UCHAR[dataSize];
		memcpy(payload, data, dataSize);
		szPayload = dataSize;

		bKey = new UCHAR[keySize];
		memcpy(bKey, key, keySize);
		szKey = keySize;

		iv = initVector;
	}

	// Decrypts payload using algorithm provided into payload object
	// Returns TRUE upon success, FALSE otherwise
	//
	BOOL Decrypt();
	
	// Encrypts payload using algorithm provided into payload object
	// Returns TRUE upon success, FALSE otherwise
	//
	BOOL Encrypt();

	// Frees memory used by payload object. Run when done using
	// Returns TRUE upon success, FALSE otherwise
	BOOL Destroy();
};

#endif